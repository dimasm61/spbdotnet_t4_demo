<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs"  #>

using System;
using Xunit;

namespace Simple_TestClassArray
{
    public partial class UnitTest1
    {
        private static MyTestClass[] testArray = new []{
<#
    var countOfItem = 5000;
    var countOfTestByModel = 100000;
    var countOfTestByItem  = 100000;

    var keyList = new List<Guid>();
    var k = "";
    var models = new[]{Guid.NewGuid(), Guid.NewGuid(), Guid.NewGuid(), Guid.NewGuid(), Guid.NewGuid()};
    var rand = new Random();
    string allowedChars = "ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789!@$?_-";

    // создаем набор тестовых записей
    for(var i = 0; i < countOfItem; i++)
    {
        k = (i > 0) ? ", ": "  ";
        // создаем рандомное наполнение
        var key = Guid.NewGuid();
        keyList.Add(key);
        var modelKey = models.OrderBy(c=> Guid.NewGuid()).FirstOrDefault();
        var carName= string.Join("", Enumerable.Repeat(0, 10).Select(n => allowedChars[rand.Next(60)]));
        var buildYear = rand.Next(1990, 2020);
        var saleDate = $"new DateTime({rand.Next(buildYear, 2020)}, {rand.Next(1, 12):00}, {rand.Next(1, 28):00})";
#>
            <#=k#>new MyTestClass(Guid.Parse("<#=key#>"), Guid.Parse("<#=modelKey#>"), "<#=carName#>", <#=buildYear#>, <#=saleDate #>)
<#
    }
#>
        };

        private static Guid[] randomModelKeyArray = new []{
<#
    // создаем набор modelKey для тестов
    for(var i = 0 ; i < countOfTestByModel; i++ )
    {
        k = (i > 0) ? ", ": "  ";
        var key = models.OrderBy(c=>Guid.NewGuid()).FirstOrDefault();
#>
            <#=k#>Guid.Parse("<#=key #>")
<#
    }
#>
         };

        private static Guid[] randomKeyArray = new []{
<#

    // создаем набор key для тестов
    for(var i = 0 ; i < countOfTestByItem; i++ )
    {
        k = (i > 0) ? ", ": "  ";
        var key = keyList.OrderBy(c=>Guid.NewGuid()).FirstOrDefault();
#>
            <#=k#>Guid.Parse("<#=key #>")
<#
    }
#>
         };
    }
}
