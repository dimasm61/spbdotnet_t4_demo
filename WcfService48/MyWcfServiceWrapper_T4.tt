<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System.Text.Json" #>
<#@ output extension=".cs" #>
<#@ include file="WcfMetadataModel.ttInclude" #>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Polly.CircuitBreaker;

namespace WcfService48
{
    public partial class MyWcfServiceWrapper
    {
<#
    // hostspecific template directive should be "true"
    string solutionPath = Host.ResolveAssemblyReference("$(SolutionDir)");
    var fileName =  $"{solutionPath}\\WcfService48\\Metadata.json";

    var str = File.ReadAllText(fileName);

    var items = JsonSerializer.Deserialize<List<MetadataItem>>(str);
    
    foreach(var a in items)
    {
#>
        /// <summary><#=a.Comment#></summary>
        public <#=a.ReturnType #> <#=a.Name#> (<#=a.ArgListStr #>)
        {
            if (LogInformationEnabled) _logger.Information("{Method} start", nameof(<#=a.Name#>));
            Stopwatch sw = null;
            if(IsTrace)
                sw = Stopwatch.StartNew();
            try
            {
                if (LogVerboseEnabled) _logger.Verbose($"{{Method}} args: "
<#
                foreach(var s in a.ArgList)
                {
                    var h = s.Split(':');
#>
                    + $"<#=h[1]#>:{<#=h[1]#>}, "
<#
                }
#>
                    , nameof(<#=a.Name#>));

                using(var db = new DbContext())
                {
                    return _policy.Execute(() => _impl.<#=a.Name#>(db, <#=a.ArgListWithoutTypeStr #>));
                }
            }
            catch(BrokenCircuitException bcex)
            {
                _logger.Warning($"{{Method}} {nameof(BrokenCircuitException)}, return empty", nameof(<#=a.Name#>));
                return new <#= a.ReturnType#>();
            }
            catch(Exception ex)
            {
                if(IsTrace) sw.Stop();

               _logger.Error(ex, nameof(<#=a.Name#>));
            }
            finally
            {
                if(IsTrace) 
                {
                    sw.Stop();
                    if (LogDebugEnabled) _logger.Debug("{Method} finish, {Duration} ms", nameof(<#=a.Name#>), sw.ElapsedMilliseconds);
                }
            }

            return null;
        }
<#
    }
#>
    } 
}