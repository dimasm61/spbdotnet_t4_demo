<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System.Text.Json" #>
<#@ output extension=".cs" #>
<#@ include file="WcfMetadataModel.ttInclude" #>

using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace WcfService48
{
    public partial class MyWcfServiceWripper
    {
<#
    // hostspecific template directive should be "true"
    string solutionPath = Host.ResolveAssemblyReference("$(SolutionDir)");
    var fileName =  $"{solutionPath}\\WcfService48\\Metadata.json";

    var str = File.ReadAllText(fileName);

    var items = JsonSerializer.Deserialize<List<MetadataItem>>(str);
    
    foreach(var a in items)
    {
#>
        /// <summary><#=a.Comment#></summary>
        public <#=a.ReturnType #> <#=a.Name#> (<#=a.ArgListStr #>)
        {
            Stopwatch sw = null;
            if(IsTrace)
                sw = Stopwatch.StartNew();
            try
            {
                using(var db = new DbContext())
                {
                    return _impl.<#=a.Name#>(db, <#=a.ArgListWithoutTypeStr #>);
                }
            }
            catch(Exception ex)
            {
                if(IsTrace) sw.Stop();

                Log(nameof(<#=a.Name#>), ex);
            }
            finally
            {
                if(IsTrace) 
                {
                    sw.Stop();
                    Log(nameof(<#=a.Name#>), $"Elapsed {sw.ElapsedMilliseconds}ms");
                }
            }

            return null;
        }
<#
    }
#>
    } 
}