    <#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VisualStudioHelper.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>

<#
    var VisualStudio = new AutomationHelper(this.Host);

    var project = VisualStudio.GetProject("EnumByDOM");

    var classList = VisualStudio
        .CodeModel
        .GetAllCodeElementsOfType(project.CodeModel.CodeElements, vsCMElement.vsCMElementClass, false)
        .Cast<EnvDTE.CodeClass>()
        .OrderBy(d => d.FullName);
#>
namespace EnumByDOM
{
    public class Converter
    {
        public enum ClassEnum
        {
<# 
    foreach(var item in classList)
    {
        var parent = item.Bases.OfType<EnvDTE.CodeClass>().FirstOrDefault();

        if(parent.Name != "CommonClass") continue;
#>
            <#=item.Name #>,
<#
    }
#>
        }

        public static CommonClass GetInstance(ClassEnum classEnum)
        {
            switch(classEnum)
            {
<# 
    foreach(var item in classList)
    {
        var parent = item.Bases.OfType<EnvDTE.CodeClass>().FirstOrDefault();

        if(parent.Name != "CommonClass") continue;
#>
                case ClassEnum.<#=item.Name #>: return new <#=item.Name #>();
<#
    }
#>
                default: return null;
            }
        }
    }
}